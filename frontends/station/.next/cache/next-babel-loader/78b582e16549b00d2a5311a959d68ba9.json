{"ast":null,"code":"import withApollo from 'nextjs-with-apollo';\nimport fetch from 'isomorphic-unfetch';\nimport { getConfig } from \"../../config/get-config\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport cookie from 'cookie';\nimport get from 'lodash/get';\nconst isServer = true;\nconst {\n  GRAPHQL_ENDPOINT,\n  BUILD_NUMBER,\n  STAGE\n} = getConfig();\n\nconst getToken = headers => {\n  const cookies = get(isServer ? headers : document, 'cookie', '');\n  return get(cookie.parse(cookies), 'auth0_token', '');\n};\n\nconst attachAuth = headers => async () => {\n  const token = getToken(headers);\n  return {\n    headers: {\n      authorization: `Bearer ${token}`,\n      'apollographql-client-name': `station-${STAGE}`,\n      'apollographql-client-version': `${BUILD_NUMBER}`\n    }\n  };\n};\n\nconst createApolloClient = ({\n  initialState = {},\n  headers = {}\n}) => {\n  const authLink = () => setContext(attachAuth(headers));\n\n  const httpLink = new HttpLink({\n    credentials: 'same-origin',\n    uri: GRAPHQL_ENDPOINT,\n    fetch\n  });\n  return new ApolloClient({\n    ssrMode: isServer,\n    link: ApolloLink.from([authLink(), httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n};\n\nexport { attachAuth };\nexport default withApollo(createApolloClient);","map":{"version":3,"sources":["/Users/subash/acloudguru/ideahour/frontends/station/src/hocs/apollo/index.js"],"names":["withApollo","fetch","getConfig","InMemoryCache","ApolloClient","HttpLink","ApolloLink","setContext","cookie","get","isServer","GRAPHQL_ENDPOINT","BUILD_NUMBER","STAGE","getToken","headers","cookies","document","parse","attachAuth","token","authorization","createApolloClient","initialState","authLink","httpLink","credentials","uri","ssrMode","link","from","cache","restore"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,QAAQ,OAAd;AAEA,MAAM;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,YAApB;AAAkCC,EAAAA;AAAlC,IAA4CX,SAAS,EAA3D;;AAEA,MAAMY,QAAQ,GAAGC,OAAO,IAAI;AAC1B,QAAMC,OAAO,GAAGP,GAAG,CAACC,QAAQ,GAAGK,OAAH,GAAaE,QAAtB,EAAgC,QAAhC,EAA0C,EAA1C,CAAnB;AAEA,SAAOR,GAAG,CAACD,MAAM,CAACU,KAAP,CAAaF,OAAb,CAAD,EAAwB,aAAxB,EAAuC,EAAvC,CAAV;AACD,CAJD;;AAMA,MAAMG,UAAU,GAAGJ,OAAO,IAAI,YAAY;AACxC,QAAMK,KAAK,GAAGN,QAAQ,CAACC,OAAD,CAAtB;AAEA,SAAO;AACLA,IAAAA,OAAO,EAAE;AACPM,MAAAA,aAAa,EAAG,UAASD,KAAM,EADxB;AAEP,mCAA8B,WAAUP,KAAM,EAFvC;AAGP,sCAAiC,GAAED,YAAa;AAHzC;AADJ,GAAP;AAOD,CAVD;;AAYA,MAAMU,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,YAAY,GAAG,EAAjB;AAAqBR,EAAAA,OAAO,GAAG;AAA/B,CAAD,KAAyC;AAClE,QAAMS,QAAQ,GAAG,MAAMjB,UAAU,CAACY,UAAU,CAACJ,OAAD,CAAX,CAAjC;;AAEA,QAAMU,QAAQ,GAAG,IAAIpB,QAAJ,CAAa;AAC5BqB,IAAAA,WAAW,EAAE,aADe;AAE5BC,IAAAA,GAAG,EAAEhB,gBAFuB;AAG5BV,IAAAA;AAH4B,GAAb,CAAjB;AAMA,SAAO,IAAIG,YAAJ,CAAiB;AACtBwB,IAAAA,OAAO,EAAElB,QADa;AAEtBmB,IAAAA,IAAI,EAAEvB,UAAU,CAACwB,IAAX,CAAgB,CAACN,QAAQ,EAAT,EAAaC,QAAb,CAAhB,CAFgB;AAGtBM,IAAAA,KAAK,EAAE,IAAI5B,aAAJ,GAAoB6B,OAApB,CAA4BT,YAA5B;AAHe,GAAjB,CAAP;AAKD,CAdD;;AAgBA,SAASJ,UAAT;AACA,eAAenB,UAAU,CAACsB,kBAAD,CAAzB","sourcesContent":["import withApollo from 'nextjs-with-apollo';\nimport fetch from 'isomorphic-unfetch';\nimport { getConfig } from 'config/get-config';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport cookie from 'cookie';\nimport get from 'lodash/get';\n\nconst isServer = typeof window === 'undefined';\n\nconst { GRAPHQL_ENDPOINT, BUILD_NUMBER, STAGE } = getConfig();\n\nconst getToken = headers => {\n  const cookies = get(isServer ? headers : document, 'cookie', '');\n\n  return get(cookie.parse(cookies), 'auth0_token', '');\n};\n\nconst attachAuth = headers => async () => {\n  const token = getToken(headers);\n\n  return {\n    headers: {\n      authorization: `Bearer ${token}`,\n      'apollographql-client-name': `station-${STAGE}`,\n      'apollographql-client-version': `${BUILD_NUMBER}`\n    }\n  };\n};\n\nconst createApolloClient = ({ initialState = {}, headers = {} }) => {\n  const authLink = () => setContext(attachAuth(headers));\n\n  const httpLink = new HttpLink({\n    credentials: 'same-origin',\n    uri: GRAPHQL_ENDPOINT,\n    fetch\n  });\n\n  return new ApolloClient({\n    ssrMode: isServer,\n    link: ApolloLink.from([authLink(), httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n};\n\nexport { attachAuth };\nexport default withApollo(createApolloClient);\n"]},"metadata":{},"sourceType":"module"}