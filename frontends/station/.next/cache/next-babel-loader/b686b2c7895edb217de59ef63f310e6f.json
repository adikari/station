{"ast":null,"code":"var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _defineProperty = require(\"@babel/runtime-corejs2/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _getConfig = function getConfig(env) {\n  var environment = env || process.env.STAGE;\n\n  try {\n    // eslint-disable-next-line\n    return require(\"./\".concat(environment, \".config.js\"));\n  } catch (err) {\n    throw new Error(\"Could not find config for \".concat(environment));\n  }\n};\n\nmodule.exports = {\n  getConfig: function getConfig() {\n    return _objectSpread({}, _getConfig(process.env.STAGE), {\n      STAGE: process.env.STAGE\n    });\n  }\n};","map":{"version":3,"sources":["/Users/subash/acloudguru/ideahour/frontends/station/src/config/get-config.js"],"names":["getConfig","env","environment","process","STAGE","require","err","Error","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAMA,UAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB,MAAMC,WAAW,GAAGD,GAAG,IAAIE,OAAO,CAACF,GAAR,CAAYG,KAAvC;;AAEA,MAAI;AACF;AACA,WAAOC,OAAO,aAAMH,WAAN,gBAAd;AACD,GAHD,CAGE,OAAOI,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,qCAAuCL,WAAvC,EAAN;AACD;AACF,CATD;;AAWAM,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,SAAS,EAAE;AAAA,6BACNA,UAAS,CAACG,OAAO,CAACF,GAAR,CAAYG,KAAb,CADH;AAETA,MAAAA,KAAK,EAAED,OAAO,CAACF,GAAR,CAAYG;AAFV;AAAA;AADI,CAAjB","sourcesContent":["const getConfig = env => {\n  const environment = env || process.env.STAGE;\n\n  try {\n    // eslint-disable-next-line\n    return require(`./${environment}.config.js`);\n  } catch (err) {\n    throw new Error(`Could not find config for ${environment}`);\n  }\n};\n\nmodule.exports = {\n  getConfig: () => ({\n    ...getConfig(process.env.STAGE),\n    STAGE: process.env.STAGE\n  })\n};\n"]},"metadata":{},"sourceType":"script"}