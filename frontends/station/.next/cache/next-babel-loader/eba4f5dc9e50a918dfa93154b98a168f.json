{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport withApollo from 'nextjs-with-apollo';\nimport fetch from 'isomorphic-unfetch';\nimport { getConfig } from \"../../config/get-config\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport cookie from 'cookie';\nimport get from 'lodash/get';\nvar isServer = false;\n\nvar _getConfig = getConfig(),\n    GRAPHQL_ENDPOINT = _getConfig.GRAPHQL_ENDPOINT,\n    BUILD_NUMBER = _getConfig.BUILD_NUMBER,\n    STAGE = _getConfig.STAGE;\n\nvar getToken = function getToken(headers) {\n  var cookies = get(isServer ? headers : document, 'cookie', '');\n  return get(cookie.parse(cookies), 'auth0_token', '');\n};\n\nvar attachAuth = function attachAuth(headers) {\n  return (\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var token;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              token = getToken(headers);\n              return _context.abrupt(\"return\", {\n                headers: {\n                  authorization: \"Bearer \".concat(token),\n                  'apollographql-client-name': \"station-\".concat(STAGE),\n                  'apollographql-client-version': \"\".concat(BUILD_NUMBER)\n                }\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))\n  );\n};\n\nvar createApolloClient = function createApolloClient(_ref2) {\n  var _ref2$initialState = _ref2.initialState,\n      initialState = _ref2$initialState === void 0 ? {} : _ref2$initialState,\n      _ref2$headers = _ref2.headers,\n      headers = _ref2$headers === void 0 ? {} : _ref2$headers;\n\n  var authLink = function authLink() {\n    return setContext(attachAuth(headers));\n  };\n\n  var httpLink = new HttpLink({\n    credentials: 'same-origin',\n    uri: GRAPHQL_ENDPOINT,\n    fetch: fetch\n  });\n  return new ApolloClient({\n    ssrMode: isServer,\n    link: ApolloLink.from([authLink(), httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n};\n\nexport { attachAuth };\nexport default withApollo(createApolloClient);","map":{"version":3,"sources":["/Users/subash/acloudguru/ideahour/frontends/station/src/hocs/apollo/index.js"],"names":["withApollo","fetch","getConfig","InMemoryCache","ApolloClient","HttpLink","ApolloLink","setContext","cookie","get","isServer","GRAPHQL_ENDPOINT","BUILD_NUMBER","STAGE","getToken","headers","cookies","document","parse","attachAuth","token","authorization","createApolloClient","initialState","authLink","httpLink","credentials","uri","ssrMode","link","from","cache","restore"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,IAAMC,QAAQ,QAAd;;iBAEkDR,SAAS,E;IAAnDS,gB,cAAAA,gB;IAAkBC,Y,cAAAA,Y;IAAcC,K,cAAAA,K;;AAExC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,OAAO,EAAI;AAC1B,MAAMC,OAAO,GAAGP,GAAG,CAACC,QAAQ,GAAGK,OAAH,GAAaE,QAAtB,EAAgC,QAAhC,EAA0C,EAA1C,CAAnB;AAEA,SAAOR,GAAG,CAACD,MAAM,CAACU,KAAP,CAAaF,OAAb,CAAD,EAAwB,aAAxB,EAAuC,EAAvC,CAAV;AACD,CAJD;;AAMA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAAAJ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBK,cAAAA,KADsB,GACdN,QAAQ,CAACC,OAAD,CADM;AAAA,+CAGrB;AACLA,gBAAAA,OAAO,EAAE;AACPM,kBAAAA,aAAa,mBAAYD,KAAZ,CADN;AAEP,iEAAwCP,KAAxC,CAFO;AAGP,4DAAmCD,YAAnC;AAHO;AADJ,eAHqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;AAAA;AAAA,CAA1B;;AAYA,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,QAAyC;AAAA,iCAAtCC,YAAsC;AAAA,MAAtCA,YAAsC,mCAAvB,EAAuB;AAAA,4BAAnBR,OAAmB;AAAA,MAAnBA,OAAmB,8BAAT,EAAS;;AAClE,MAAMS,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMjB,UAAU,CAACY,UAAU,CAACJ,OAAD,CAAX,CAAhB;AAAA,GAAjB;;AAEA,MAAMU,QAAQ,GAAG,IAAIpB,QAAJ,CAAa;AAC5BqB,IAAAA,WAAW,EAAE,aADe;AAE5BC,IAAAA,GAAG,EAAEhB,gBAFuB;AAG5BV,IAAAA,KAAK,EAALA;AAH4B,GAAb,CAAjB;AAMA,SAAO,IAAIG,YAAJ,CAAiB;AACtBwB,IAAAA,OAAO,EAAElB,QADa;AAEtBmB,IAAAA,IAAI,EAAEvB,UAAU,CAACwB,IAAX,CAAgB,CAACN,QAAQ,EAAT,EAAaC,QAAb,CAAhB,CAFgB;AAGtBM,IAAAA,KAAK,EAAE,IAAI5B,aAAJ,GAAoB6B,OAApB,CAA4BT,YAA5B;AAHe,GAAjB,CAAP;AAKD,CAdD;;AAgBA,SAASJ,UAAT;AACA,eAAenB,UAAU,CAACsB,kBAAD,CAAzB","sourcesContent":["import withApollo from 'nextjs-with-apollo';\nimport fetch from 'isomorphic-unfetch';\nimport { getConfig } from 'config/get-config';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport cookie from 'cookie';\nimport get from 'lodash/get';\n\nconst isServer = typeof window === 'undefined';\n\nconst { GRAPHQL_ENDPOINT, BUILD_NUMBER, STAGE } = getConfig();\n\nconst getToken = headers => {\n  const cookies = get(isServer ? headers : document, 'cookie', '');\n\n  return get(cookie.parse(cookies), 'auth0_token', '');\n};\n\nconst attachAuth = headers => async () => {\n  const token = getToken(headers);\n\n  return {\n    headers: {\n      authorization: `Bearer ${token}`,\n      'apollographql-client-name': `station-${STAGE}`,\n      'apollographql-client-version': `${BUILD_NUMBER}`\n    }\n  };\n};\n\nconst createApolloClient = ({ initialState = {}, headers = {} }) => {\n  const authLink = () => setContext(attachAuth(headers));\n\n  const httpLink = new HttpLink({\n    credentials: 'same-origin',\n    uri: GRAPHQL_ENDPOINT,\n    fetch\n  });\n\n  return new ApolloClient({\n    ssrMode: isServer,\n    link: ApolloLink.from([authLink(), httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n};\n\nexport { attachAuth };\nexport default withApollo(createApolloClient);\n"]},"metadata":{},"sourceType":"module"}